/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.previred.periodosfaltantes.swagger.codegen.api;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.previred.periodosfaltantes.swagger.codegen.model.DTOFecha;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "periodosFaltantes", description = "the periodosFaltantes API")
public interface PeriodosFaltantesApi {

    Logger log = LoggerFactory.getLogger(PeriodosFaltantesApi.class);
    
    String urlGDD = "http://127.0.0.1:8080/periodos/api";
    

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Encuentra los periodos faltantes dentro de un rango de fechas desde el servicio GDD", nickname = "periodosfaltantes", notes = "", response = DTOFecha.class, tags={ "Periodos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Invocación correcta del servicio", response = DTOFecha.class),
        @ApiResponse(code = 400, message = "Error en la invocación del servicio") })
    @RequestMapping(value = "/periodosFaltantes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DTOFecha> periodosfaltantes() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                	
            		/*Invocación servicio GDD*/
            		URL url = new URL(urlGDD);
            		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            		conn.setRequestMethod("GET");
            		conn.setRequestProperty("Accept", "application/json");

            		if (conn.getResponseCode() != 200) {
            			throw new RuntimeException("HTTP error code : " + conn.getResponseCode());
            		}
            		BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));

            		String output;
            		StringBuilder sbJSON = new StringBuilder();
            		
            		while ((output = br.readLine()) != null) {
            			sbJSON.append(output);
            		}
            		conn.disconnect();

            		
            		
            		
                	/*Revisión de periodos faltantes*/
                	SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                	
                	JSONObject jsonGDD = new JSONObject(sbJSON.toString());
                	String postGDD = jsonGDD.get("fechas").toString().substring(1, jsonGDD.get("fechas").toString().length()-1);

                	List<String> fechasString = new ArrayList<String>(Arrays.asList(postGDD.replace("\"", "").split(",")));
                	List<LocalDate> fechasGDD = new LinkedList<LocalDate>();
                	for (String d : fechasString) {
                		fechasGDD.add(format.parse(d).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                	}
                	
                	LocalDate fechaInicio = format.parse(jsonGDD.getString("fechaCreacion")).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        			LocalDate fechaFin = format.parse(jsonGDD.getString("fechaFin")).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        			
        			/*Validación de primer día del mes*/
        			if(fechaInicio.getDayOfMonth() > 1 || fechaFin.getDayOfMonth() > 1 ) {
	        			fechaInicio = LocalDate.of(fechaInicio.getYear(), fechaInicio.getMonth(), 1);
	        			fechaFin 	= LocalDate.of(fechaFin.getYear(), fechaFin.getMonth(), 1);
        			}
        			/* Validación de fechas */
        			if(fechaInicio.isAfter(fechaFin)) {
        				throw new IOException("Fecha de inicio es mayor a la fecha final.");
        			}
        			/* Generación de datos faltantes */
        			List<LocalDate> datosFaltantes = new LinkedList<LocalDate>();
        			for (LocalDate date = fechaInicio; !date.isAfter(fechaFin); date = date.plusMonths(1)) {
        			    if(!fechasGDD.contains(date)) {
        			    	datosFaltantes.add(date);
        			    }
        			}

        			
        			
        			
                	/*Generación respuesta*/
        			
        			StringBuilder response = new StringBuilder();
        			response.append("{  \"id\" : ");
        			response.append(jsonGDD.get("id"));
        			response.append(",  \"fechaCreacion\" : ");
        			response.append("\"");
        			response.append(fechaInicio.toString());
        			response.append("\"");
        			response.append(",  \"fechaFin\" : ");
        			response.append("\"");
        			response.append(fechaFin.toString());
        			response.append("\"");
        			
        			response.append(",  \"fechas\" : [");
        			for(LocalDate ld : fechasGDD) {
        				response.append("\"");
        				response.append(ld.toString());
        				response.append("\",");
        			}
        			response.deleteCharAt(response.length()-1);
        			response.append("] ,  \"fechasFaltantes\" : [");
        			
        			for(LocalDate ldf : datosFaltantes) {
        				response.append("\"");
        				response.append(ldf.toString());
        				response.append("\",");
        			}
        			response.deleteCharAt(response.length()-1);        			
        			response.append("] }");
        			
        			
        			
        			
        			/*Envío respuesta*/
                    return new ResponseEntity<>(getObjectMapper().get().readValue(response.toString(), DTOFecha.class), HttpStatus.OK);
                    
                } catch (IOException | JSONException | ParseException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PeriodosFaltantesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
